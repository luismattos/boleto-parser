#!/usr/bin/env python3
"""
Testes unificados do m√≥dulo digitavel
Cobre normaliza√ß√£o, valida√ß√£o, DVs, properties e casos edge
"""

from ..core.digitavel import Digitavel, CamposDigitavel


# ============================================================================
# TESTES DE NORMALIZA√á√ÉO E VALIDA√á√ÉO B√ÅSICA
# ============================================================================

def test_normalizacao():
    """Testa a normaliza√ß√£o de diferentes formatos de entrada"""
    print("üß™ Testando normaliza√ß√£o...")
    
    # Teste com espa√ßos e caracteres especiais
    digitavel1 = Digitavel("12345 67890 12345 67890 12345 67890 12345 67890 12345 67")
    print(f"‚úÖ Normalizado: '{digitavel1.valor}' (tamanho: {len(digitavel1.valor)})")
    
    # Teste com pontos e h√≠fens
    digitavel2 = Digitavel("12345.67890-12345.67890-12345.67890-12345.67890-12345.67")
    print(f"‚úÖ Normalizado: '{digitavel2.valor}' (tamanho: {len(digitavel2.valor)})")
    
    # Teste com string vazia
    digitavel3 = Digitavel("")
    print(f"‚úÖ Normalizado: '{digitavel3.valor}' (tamanho: {len(digitavel3.valor)})")
    
    # Teste com None
    digitavel4 = Digitavel(None)
    print(f"‚úÖ Normalizado: '{digitavel4.valor}' (tamanho: {len(digitavel4.valor)})")


def test_validacao_basica():
    """Testa a valida√ß√£o b√°sica"""
    print("\nüß™ Testando valida√ß√£o b√°sica...")
    
    # Casos v√°lidos
    digitavel_valido1 = Digitavel("1" * 47)  # Banco
    digitavel_valido2 = Digitavel("1" * 48)  # Arrecada√ß√£o
    
    print(f"‚úÖ 47 d√≠gitos (banco): {digitavel_valido1.validar()}")
    print(f"‚úÖ 48 d√≠gitos (arrecada√ß√£o): {digitavel_valido2.validar()}")
    
    # Casos inv√°lidos
    digitavel_invalido1 = Digitavel("12345")  # Muito curto
    digitavel_invalido2 = Digitavel("1" * 50)  # Muito longo
    digitavel_invalido3 = Digitavel("12345abc67890")  # Com letras
    
    print(f"‚ùå Muito curto: {digitavel_invalido1.validar()}")
    print(f"‚ùå Muito longo: {digitavel_invalido2.validar()}")
    print(f"‚ùå Com letras: {digitavel_invalido3.validar()}")


def test_validacao_campos_curtos():
    """Testa valida√ß√£o de campos muito curtos"""
    digitavel = Digitavel("")
    
    # Campo com menos de 2 d√≠gitos
    assert not digitavel._validar_campo("1")
    assert not digitavel._validar_campo("")
    
    # C√≥digo de barras com menos de 2 d√≠gitos
    assert not digitavel._validar_dv_geral("1")
    assert not digitavel._validar_dv_geral("")


# ============================================================================
# TESTES DE VALIDA√á√ÉO COMPLETA E DVs
# ============================================================================

def test_validacao_dv_completa():
    """Testa a valida√ß√£o completa dos DVs"""
    print("\nüß™ Testando valida√ß√£o completa dos DVs...")
    
    # Linha digit√°vel real (exemplo v√°lido)
    linha_valida = "2379338128600006339356000063393548441002600020"
    digitavel_valido = Digitavel(linha_valida)
    
    print(f"‚úÖ Linha v√°lida: {digitavel_valido.validar()}")
    
    # Linha digit√°vel com DVs incorretos
    linha_invalida = "2379338128600006339356000063393548441002600021"  # DV alterado
    digitavel_invalido = Digitavel(linha_invalida)
    
    print(f"‚ùå Linha inv√°lida: {digitavel_invalido.validar()}")


def test_correcao_dv():
    """Testa a corre√ß√£o de DVs incorretos"""
    print("\nüß™ Testando corre√ß√£o de DVs...")
    
    # Linha digit√°vel com DVs incorretos
    linha_com_dv_errado = "2379338128600006339356000063393548441002600021"
    digitavel_errado = Digitavel(linha_com_dv_errado)
    
    print(f"üìù Linha original: {linha_com_dv_errado}")
    print(f"‚ùå V√°lida: {digitavel_errado.validar()}")
    
    # Corrigir DVs
    linha_corrigida = digitavel_errado.corrigir_dv()
    digitavel_corrigido = Digitavel(linha_corrigida)
    
    print(f"üîß Linha corrigida: {linha_corrigida}")
    print(f"‚úÖ V√°lida ap√≥s corre√ß√£o: {digitavel_corrigido.validar()}")


def test_calculos_modulo():
    """Testa os c√°lculos de M√≥dulo 10 e M√≥dulo 11"""
    print("\nüß™ Testando c√°lculos de m√≥dulo...")
    
    digitavel = Digitavel("1234567890")
    
    # Teste M√≥dulo 10
    resultado_mod10 = digitavel._calcular_modulo_10("123456789")
    print(f"üî¢ M√≥dulo 10 para '123456789': {resultado_mod10}")
    
    # Teste M√≥dulo 11
    resultado_mod11 = digitavel._calcular_modulo_11("123456789")
    print(f"üî¢ M√≥dulo 11 para '123456789': {resultado_mod11}")


def test_casos_edge_modulo_11():
    """Testa casos edge do c√°lculo M√≥dulo 11"""
    digitavel = Digitavel("")
    
    # Caso onde resto = 0 (DV deve ser 1)
    numero_resto_zero = "12345678901234567890123456789012345678901234"
    dv_resto_zero = digitavel._calcular_modulo_11(numero_resto_zero)
    # N√£o podemos prever exatamente qual ser√° o resultado, mas testamos que n√£o quebra
    
    # Caso onde resto = 1 (DV deve ser 0) 
    numero_resto_um = "11111111111111111111111111111111111111111111"
    dv_resto_um = digitavel._calcular_modulo_11(numero_resto_um)
    # Testamos que n√£o quebra


def test_validacao_campos():
    """Testa a valida√ß√£o de campos individuais"""
    print("\nüß™ Testando valida√ß√£o de campos...")
    
    digitavel = Digitavel("2379338128600006339356000063393548441002600020")
    
    # Campos da linha digit√°vel
    campo1 = "2379338128"
    campo2 = "6000063393"
    campo3 = "5600006339"
    
    print(f"‚úÖ Campo 1 v√°lido: {digitavel._validar_campo(campo1)}")
    print(f"‚úÖ Campo 2 v√°lido: {digitavel._validar_campo(campo2)}")
    print(f"‚úÖ Campo 3 v√°lido: {digitavel._validar_campo(campo3)}")


# ============================================================================
# TESTES DE GERA√á√ÉO E EXTRA√á√ÉO
# ============================================================================

def test_geracao_codigo_barras():
    """Testa a gera√ß√£o do c√≥digo de barras"""
    print("\nüß™ Testando gera√ß√£o do c√≥digo de barras...")
    
    linha_digitavel = "2379338128600006339356000063393548441002600020"
    digitavel = Digitavel(linha_digitavel)
    
    codigo_barras = digitavel._gerar_codigo_barras()
    print(f"üìä C√≥digo de barras gerado: {codigo_barras}")
    print(f"üìè Tamanho: {len(codigo_barras)}")


def test_gerar_digitavel_valido():
    """Testa o m√©todo est√°tico gerar_digitavel_valido"""
    # Gerar digit√°vel com par√¢metros padr√£o
    digitavel1 = Digitavel.gerar_digitavel_valido()
    assert len(digitavel1) == 47
    assert digitavel1.isdigit()
    
    # Gerar digit√°vel com par√¢metros espec√≠ficos
    digitavel2 = Digitavel.gerar_digitavel_valido(banco="001", valor=50.00, vencimento_dias=15)
    assert len(digitavel2) == 47
    assert digitavel2.isdigit()
    assert digitavel2.startswith("001")
    
    # Verificar que o digit√°vel gerado tem estrutura correta
    obj_digitavel = Digitavel(digitavel2)
    assert obj_digitavel._campos is not None
    assert len(obj_digitavel._campos.bloco_campo1) == 10
    assert len(obj_digitavel._campos.bloco_campo2) == 11
    assert len(obj_digitavel._campos.bloco_campo3) == 11


# ============================================================================
# TESTES DE PROPERTIES E EXTRA√á√ÉO DE DADOS
# ============================================================================

def test_properties_campos_digitavel():
    """Testa as properties da classe CamposDigitavel"""
    # Criar campos com valores conhecidos
    campos = CamposDigitavel(
        bloco_campo1="0339916140",
        bloco_campo2="07000001912", 
        bloco_campo3="81556001014",
        dv_geral="4",
        fator_valor_e_valor="11370000038936"
    )
    
    # Testar properties de campos sem DV
    assert campos.campo1_sem_dv == "033991614"
    assert campos.campo2_sem_dv == "0700000191"
    assert campos.campo3_sem_dv == "8155600101"
    
    # Testar properties de DVs
    assert campos.dv_campo1 == "0"
    assert campos.dv_campo2 == "2"
    assert campos.dv_campo3 == "4"
    
    # Testar properties de fator e valor
    assert campos.fator_vencimento == "1137"
    assert campos.valor_centavos == "0000038936"


def test_properties_digitavel():
    """Testa as properties da classe Digitavel"""
    # Digit√°vel v√°lido
    digitavel = Digitavel("033991614.0 0700000191.2 8155600101.4 4 11370000038936")
    
    # Testar properties
    assert digitavel.banco == "033"
    assert digitavel.valor_documento == 389.36
    assert digitavel.data_vencimento is not None
    assert digitavel.fator_vencimento == "1137"
    assert digitavel.valor_centavos == "0000038936"
    # Campo livre pode variar dependendo da implementa√ß√£o, testamos apenas que existe
    assert digitavel.campo_livre is not None
    assert len(digitavel.campo_livre) == 23  # Implementa√ß√£o atual retorna 23 d√≠gitos
    assert digitavel.codigo_barras is not None
    
    # Testar com digit√°vel inv√°lido (sem campos)
    digitavel_invalido = Digitavel("12345")
    assert digitavel_invalido.banco is None
    assert digitavel_invalido.valor_documento is None
    assert digitavel_invalido.data_vencimento is None
    assert digitavel_invalido.fator_vencimento is None
    assert digitavel_invalido.valor_centavos is None
    assert digitavel_invalido.campo_livre is None
    assert digitavel_invalido.codigo_barras is None


def test_tratamento_excecoes_valor_decimal():
    """Testa tratamento de exce√ß√£o na convers√£o de valor decimal"""
    # Caso v√°lido
    campos_valido = CamposDigitavel(
        bloco_campo1="0339916140",
        bloco_campo2="07000001912",
        bloco_campo3="81556001014", 
        dv_geral="4",
        fator_valor_e_valor="11370000038936"
    )
    assert campos_valido.valor_decimal == 389.36
    
    # Caso com valor inv√°lido (deve retornar 0.0)
    campos_invalido = CamposDigitavel(
        bloco_campo1="0339916140",
        bloco_campo2="07000001912",
        bloco_campo3="81556001014",
        dv_geral="4", 
        fator_valor_e_valor="1137abc00000"  # Valor com letras
    )
    assert campos_invalido.valor_decimal == 0.0


def test_tratamento_excecoes_data_vencimento():
    """Testa tratamento de exce√ß√£o na convers√£o de data de vencimento"""
    # Caso v√°lido
    campos_valido = CamposDigitavel(
        bloco_campo1="0339916140",
        bloco_campo2="07000001912",
        bloco_campo3="81556001014",
        dv_geral="4",
        fator_valor_e_valor="11370000038936"
    )
    assert campos_valido.data_vencimento is not None
    
    # Caso com fator inv√°lido (deve retornar None)
    campos_invalido = CamposDigitavel(
        bloco_campo1="0339916140",
        bloco_campo2="07000001912", 
        bloco_campo3="81556001014",
        dv_geral="4",
        fator_valor_e_valor="abc70000038936"  # Fator com letras
    )
    assert campos_invalido.data_vencimento is None


# ============================================================================
# TESTES DE CEN√ÅRIOS REAIS
# ============================================================================

def test_cenarios_reais():
    """Testa com cen√°rios mais realistas"""
    print("\nüß™ Testando cen√°rios realistas...")
    
    # Linha digit√°vel real (exemplo)
    linha_real = "23793.38128 60000.633935 60000.633935 4 84410026000 20"
    digitavel_real = Digitavel(linha_real)
    
    print(f"‚úÖ Linha real normalizada: '{digitavel_real.valor}'")
    print(f"‚úÖ Tamanho: {len(digitavel_real.valor)}")
    print(f"‚úÖ V√°lida: {digitavel_real.validar()}")


# ============================================================================
# TESTES DE CASOS DE ERRO E TRATAMENTO DE EXCE√á√ïES
# ============================================================================

def test_digitavel_com_dv_campo1_errado():
    """Testa digit√°vel com DV do campo 1 incorreto"""
    print("\nüß™ Testando digit√°vel com DV do campo 1 incorreto...")
    
    # Digit√°vel v√°lido como base
    digitavel_base = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel_base_limpo = digitavel_base.replace(" ", "").replace(".", "")
    
    # Alterar DV do campo 1 (posi√ß√£o 9)
    digitavel_errado = digitavel_base_limpo[:9] + "9" + digitavel_base_limpo[10:]
    digitavel = Digitavel(digitavel_errado)
    
    print(f"üìù Digit√°vel com DV campo 1 errado: {digitavel_errado}")
    print(f"‚ùå V√°lido: {digitavel.validar()}")
    
    # Verificar que o campo 1 √© inv√°lido
    if digitavel._campos:
        campo1_valido = digitavel._validar_campo(digitavel._campos.bloco_campo1)
        print(f"‚ùå Campo 1 v√°lido: {campo1_valido}")
        assert not campo1_valido


def test_digitavel_com_dv_campo2_errado():
    """Testa digit√°vel com DV do campo 2 incorreto"""
    print("\nüß™ Testando digit√°vel com DV do campo 2 incorreto...")
    
    # Digit√°vel v√°lido como base
    digitavel_base = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel_base_limpo = digitavel_base.replace(" ", "").replace(".", "")
    
    # Alterar DV do campo 2 (posi√ß√£o 20)
    digitavel_errado = digitavel_base_limpo[:20] + "9" + digitavel_base_limpo[21:]
    digitavel = Digitavel(digitavel_errado)
    
    print(f"üìù Digit√°vel com DV campo 2 errado: {digitavel_errado}")
    print(f"‚ùå V√°lido: {digitavel.validar()}")
    
    # Verificar que o campo 2 √© inv√°lido
    if digitavel._campos:
        campo2_valido = digitavel._validar_campo(digitavel._campos.bloco_campo2)
        print(f"‚ùå Campo 2 v√°lido: {campo2_valido}")
        assert not campo2_valido


def test_digitavel_com_dv_campo3_errado():
    """Testa digit√°vel com DV do campo 3 incorreto"""
    print("\nüß™ Testando digit√°vel com DV do campo 3 incorreto...")
    
    # Digit√°vel v√°lido como base
    digitavel_base = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel_base_limpo = digitavel_base.replace(" ", "").replace(".", "")
    
    # Alterar DV do campo 3 (posi√ß√£o 31)
    digitavel_errado = digitavel_base_limpo[:31] + "9" + digitavel_base_limpo[32:]
    digitavel = Digitavel(digitavel_errado)
    
    print(f"üìù Digit√°vel com DV campo 3 errado: {digitavel_errado}")
    print(f"‚ùå V√°lido: {digitavel.validar()}")
    
    # Verificar que o campo 3 √© inv√°lido
    if digitavel._campos:
        campo3_valido = digitavel._validar_campo(digitavel._campos.bloco_campo3)
        print(f"‚ùå Campo 3 v√°lido: {campo3_valido}")
        assert not campo3_valido


def test_digitavel_com_dv_geral_errado():
    """Testa digit√°vel com DV geral incorreto"""
    print("\nüß™ Testando digit√°vel com DV geral incorreto...")
    
    # Digit√°vel v√°lido como base
    digitavel_base = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel_base_limpo = digitavel_base.replace(" ", "").replace(".", "")
    
    # Alterar DV geral (posi√ß√£o 32)
    digitavel_errado = digitavel_base_limpo[:32] + "9" + digitavel_base_limpo[33:]
    digitavel = Digitavel(digitavel_errado)
    
    print(f"üìù Digit√°vel com DV geral errado: {digitavel_errado}")
    print(f"‚ùå V√°lido: {digitavel.validar()}")
    
    # Verificar que o DV geral √© inv√°lido
    # O m√©todo _gerar_codigo_barras() recalcula o DV, ent√£o precisamos verificar diretamente
    if digitavel._campos:
        # Verificar se o DV geral armazenado √© diferente do calculado
        codigo_sem_dv = digitavel.valor[0:4] + digitavel._campos.campo_livre + digitavel._campos.fator_valor_e_valor
        dv_calculado = digitavel._calcular_modulo_11(codigo_sem_dv)
        dv_armazenado = int(digitavel._campos.dv_geral)
        
        print(f"üî¢ DV calculado: {dv_calculado}")
        print(f"üî¢ DV armazenado: {dv_armazenado}")
        
        # O DV armazenado deve ser diferente do calculado
        assert dv_armazenado != dv_calculado
        print(f"‚úÖ DV geral incorreto detectado corretamente")


def test_digitavel_com_multiplos_dvs_errados():
    """Testa digit√°vel com m√∫ltiplos DVs incorretos"""
    print("\nüß™ Testando digit√°vel com m√∫ltiplos DVs incorretos...")
    
    # Digit√°vel v√°lido como base
    digitavel_base = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel_base_limpo = digitavel_base.replace(" ", "").replace(".", "")
    
    # Alterar m√∫ltiplos DVs
    digitavel_errado = list(digitavel_base_limpo)
    digitavel_errado[9] = "9"   # DV campo 1
    digitavel_errado[20] = "9"  # DV campo 2
    digitavel_errado[31] = "9"  # DV campo 3
    digitavel_errado[32] = "9"  # DV geral
    digitavel_errado = "".join(digitavel_errado)
    
    digitavel = Digitavel(digitavel_errado)
    
    print(f"üìù Digit√°vel com m√∫ltiplos DVs errados: {digitavel_errado}")
    print(f"‚ùå V√°lido: {digitavel.validar()}")
    
    # Verificar que todos os campos s√£o inv√°lidos
    if digitavel._campos:
        campo1_valido = digitavel._validar_campo(digitavel._campos.bloco_campo1)
        campo2_valido = digitavel._validar_campo(digitavel._campos.bloco_campo2)
        campo3_valido = digitavel._validar_campo(digitavel._campos.bloco_campo3)
        
        print(f"‚ùå Campo 1 v√°lido: {campo1_valido}")
        print(f"‚ùå Campo 2 v√°lido: {campo2_valido}")
        print(f"‚ùå Campo 3 v√°lido: {campo3_valido}")
        
        assert not campo1_valido
        assert not campo2_valido
        assert not campo3_valido


def test_correcao_dv_especifica():
    """Testa corre√ß√£o espec√≠fica de cada tipo de DV"""
    print("\nüß™ Testando corre√ß√£o espec√≠fica de DVs...")
    
    # Digit√°vel v√°lido como base
    digitavel_base = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel_base_limpo = digitavel_base.replace(" ", "").replace(".", "")
    
    # Testar corre√ß√£o de DV do campo 2
    digitavel_errado = list(digitavel_base_limpo)
    digitavel_errado[20] = "9"  # DV campo 2 errado
    digitavel_errado = "".join(digitavel_errado)
    
    digitavel = Digitavel(digitavel_errado)
    print(f"üìù Digit√°vel original com erro: {digitavel_errado}")
    print(f"‚ùå V√°lido antes da corre√ß√£o: {digitavel.validar()}")
    
    # Corrigir
    digitavel_corrigido = digitavel.corrigir_dv()
    digitavel_obj_corrigido = Digitavel(digitavel_corrigido)
    
    print(f"üîß Digit√°vel corrigido: {digitavel_corrigido}")
    print(f"‚úÖ V√°lido ap√≥s corre√ß√£o: {digitavel_obj_corrigido.validar()}")
    
    # Verificar que a corre√ß√£o funcionou
    assert digitavel_obj_corrigido.validar()


def test_digitavel_com_caracteres_invalidos():
    """Testa digit√°vel com caracteres inv√°lidos"""
    print("\nüß™ Testando digit√°vel com caracteres inv√°lidos...")
    
    casos_invalidos = [
        "03399.1614.0 07000.00191.2 81556.00101.4 4 11370000038936",  # Pontos extras
        "033991614.0 0700000191.2 8155600101.4 4 11370000038936abc",  # Letras no final
        "abc033991614.0 0700000191.2 8155600101.4 4 11370000038936",  # Letras no in√≠cio
        "033991614.0 0700000191.2 8155600101.4 4 11370000038936!",    # Caracteres especiais
        "033991614.0 0700000191.2 8155600101.4 4 11370000038936@#$",  # M√∫ltiplos caracteres especiais
    ]
    
    for i, caso in enumerate(casos_invalidos, 1):
        digitavel = Digitavel(caso)
        print(f"üìù Caso {i}: {caso}")
        print(f"üßπ Normalizado: {digitavel.valor}")
        print(f"‚ùå V√°lido: {digitavel.validar()}")
        print(f"üìè Tamanho: {len(digitavel.valor)}")
        print()


def test_digitavel_com_tamanhos_incorretos():
    """Testa digit√°vel com tamanhos incorretos"""
    print("\nüß™ Testando digit√°vel com tamanhos incorretos...")
    
    casos_tamanho = [
        ("12345", "Muito curto (5 d√≠gitos)"),
        ("123456789012345678901234567890123456789012345678901234567890", "Muito longo (60 d√≠gitos)"),
        ("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "Extremamente longo (80 d√≠gitos)"),
        ("", "Vazio"),
        ("1", "Apenas 1 d√≠gito"),
        ("12", "Apenas 2 d√≠gitos"),
        ("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "Muito muito longo (120 d√≠gitos)"),
    ]
    
    for caso, descricao in casos_tamanho:
        digitavel = Digitavel(caso)
        print(f"üìù {descricao}: {caso}")
        print(f"üßπ Normalizado: {digitavel.valor}")
        print(f"‚ùå V√°lido: {digitavel.validar()}")
        print(f"üìè Tamanho: {len(digitavel.valor)}")
        print()


def test_properties_com_digitavel_invalido():
    """Testa properties com digit√°vel inv√°lido"""
    print("\nüß™ Testando properties com digit√°vel inv√°lido...")
    
    # Digit√°vel inv√°lido (muito curto)
    digitavel_invalido = Digitavel("12345")
    
    # Todas as properties devem retornar None ou valores padr√£o
    assert digitavel_invalido.banco is None
    assert digitavel_invalido.valor_documento is None
    assert digitavel_invalido.data_vencimento is None
    assert digitavel_invalido.fator_vencimento is None
    assert digitavel_invalido.valor_centavos is None
    assert digitavel_invalido.campo_livre is None
    assert digitavel_invalido.codigo_barras is None
    
    print("‚úÖ Todas as properties retornam None para digit√°vel inv√°lido")
    
    # Digit√°vel com formato correto mas DVs errados
    digitavel_dv_errado = Digitavel("033991614.9 0700000191.9 8155600101.9 9 11370000038936")
    
    # Properties devem funcionar mesmo com DVs errados
    assert digitavel_dv_errado.banco == "033"
    assert digitavel_dv_errado.valor_documento == 389.36
    assert digitavel_dv_errado.fator_vencimento == "1137"
    assert digitavel_dv_errado.valor_centavos == "0000038936"
    
    print("‚úÖ Properties funcionam mesmo com DVs incorretos")


def test_tratamento_erros_extracao_campos():
    """Testa tratamento de erros na extra√ß√£o de campos"""
    print("\nüß™ Testando tratamento de erros na extra√ß√£o de campos...")
    
    # Digit√°vel muito curto para extrair campos
    digitavel_curto = Digitavel("12345")
    assert digitavel_curto._campos is None
    
    # Digit√°vel com tamanho exato mas formato incorreto
    digitavel_47_digitos = Digitavel("1" * 47)
    assert digitavel_47_digitos._campos is not None  # Deve extrair mesmo que inv√°lido
    
    # Verificar que a extra√ß√£o n√£o quebra com dados inv√°lidos
    if digitavel_47_digitos._campos:
        assert len(digitavel_47_digitos._campos.bloco_campo1) == 10
        assert len(digitavel_47_digitos._campos.bloco_campo2) == 11
        assert len(digitavel_47_digitos._campos.bloco_campo3) == 11
        assert len(digitavel_47_digitos._campos.dv_geral) == 1
        assert len(digitavel_47_digitos._campos.fator_valor_e_valor) == 14
    
    print("‚úÖ Extra√ß√£o de campos funciona mesmo com dados inv√°lidos")


def test_digitavel_real_boleto_exemplo():
    """Testa a valida√ß√£o com a linha digit√°vel real do boleto-exemplo.txt"""
    print("\nüß™ Testando linha digit√°vel real do boleto-exemplo.txt...")
    linha_formatada = "0339916140 07000001912 81556001014 4 11370000038936"
    linha_digitavel = linha_formatada.replace(" ", "").replace(".", "")
    digitavel = Digitavel(linha_digitavel)
    print(f"üìù Linha digit√°vel: {linha_digitavel}")
    print(f"‚úÖ V√°lida: {digitavel.validar()}")


def test_digitavel_detalhado():
    """Mostra a valida√ß√£o detalhada dos campos/DVs da linha digit√°vel fornecida pelo usu√°rio"""
    print("\nüß™ Testando linha digit√°vel detalhada fornecida pelo usu√°rio...")
    linha_formatada = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    linha_digitavel = linha_formatada.replace(" ", "").replace(".", "")
    digitavel = Digitavel(linha_digitavel)
    print(f"üìù Linha digit√°vel: {linha_digitavel}")
    print(f"‚úÖ V√°lida: {digitavel.validar()}")

    # Campos
    campo1 = linha_digitavel[0:10]
    campo2 = linha_digitavel[10:20]
    campo3 = linha_digitavel[20:30]
    campo4 = linha_digitavel[30:31]
    campo5 = linha_digitavel[31:]

    print(f"\nCampos:")
    print(f"  Campo 1: {campo1} | V√°lido: {digitavel._validar_campo(campo1)}")
    print(f"  Campo 2: {campo2} | V√°lido: {digitavel._validar_campo(campo2)}")
    print(f"  Campo 3: {campo3} | V√°lido: {digitavel._validar_campo(campo3)}")
    print(f"  Campo 4 (DV geral): {campo4}")
    print(f"  Campo 5: {campo5}")

    # C√≥digo de barras e DV geral
    codigo_barras = digitavel._gerar_codigo_barras()
    print(f"\nC√≥digo de barras gerado: {codigo_barras}")
    print(f"DV geral v√°lido: {digitavel._validar_dv_geral(codigo_barras)}")


def test_nova_estrategia():
    """Testa a nova estrat√©gia de normaliza√ß√£o, split e preenchimento de objeto"""
    print("\nüß™ Testando nova estrat√©gia (normaliza√ß√£o + split + objeto)...")
    linha_formatada = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel = Digitavel(linha_formatada)
    
    print(f"üìù Linha original: {linha_formatada}")
    print(f"üßπ Linha normalizada: {digitavel.valor}")
    print(f"‚úÖ V√°lida: {digitavel.validar()}")
    
    if digitavel._campos:
        print(f"\nCampos extra√≠dos:")
        print(f"  Bloco Campo 1: {digitavel._campos.bloco_campo1} | V√°lido: {digitavel._validar_campo(digitavel._campos.bloco_campo1)}")
        print(f"  Bloco Campo 2: {digitavel._campos.bloco_campo2} | V√°lido: {digitavel._validar_campo(digitavel._campos.bloco_campo2)}")
        print(f"  Bloco Campo 3: {digitavel._campos.bloco_campo3} | V√°lido: {digitavel._validar_campo(digitavel._campos.bloco_campo3)}")
        print(f"  DV Geral: {digitavel._campos.dv_geral}")
        print(f"  Fator/Valor: {digitavel._campos.fator_valor_e_valor}")
        
        print(f"\nInforma√ß√µes extra√≠das:")
        print(f"  üè¶ Banco: {digitavel.banco}")
        print(f"  üí∞ Moeda: {digitavel._campos.moeda}")
        print(f"  üìã Campo Livre: {digitavel.campo_livre}")
        print(f"  üìÖ Fator Vencimento: {digitavel.fator_vencimento}")
        print(f"  üíµ Valor (centavos): {digitavel.valor_centavos}")
        print(f"  üíµ Valor (reais): R$ {digitavel.valor_documento:.2f}")
        print(f"  üìÖ Data Vencimento: {digitavel.data_vencimento}")
        
        # C√≥digo de barras
        codigo_barras = digitavel.codigo_barras
        print(f"  üìä C√≥digo de Barras: {codigo_barras}")
        print(f"  ‚úÖ DV Geral v√°lido: {digitavel._validar_dv_geral(codigo_barras) if codigo_barras else False}")


def test_linha_digitavel_real():
    """Testa a linha digit√°vel real do boleto-exemplo.txt"""
    print("\nüß™ Testando linha digit√°vel real do boleto-exemplo.txt...")
    linha_real = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel = Digitavel(linha_real)
    
    print(f"üìù Linha original: {linha_real}")
    print(f"üßπ Linha normalizada: {digitavel.valor}")
    print(f"‚úÖ V√°lida: {digitavel.validar()}")
    
    if digitavel._campos:
        print(f"\nCampos extra√≠dos:")
        print(f"  Bloco Campo 1: {digitavel._campos.bloco_campo1} | V√°lido: {digitavel._validar_campo(digitavel._campos.bloco_campo1)}")
        print(f"  Bloco Campo 2: {digitavel._campos.bloco_campo2} | V√°lido: {digitavel._validar_campo(digitavel._campos.bloco_campo2)}")
        print(f"  Bloco Campo 3: {digitavel._campos.bloco_campo3} | V√°lido: {digitavel._validar_campo(digitavel._campos.bloco_campo3)}")
        print(f"  DV Geral: {digitavel._campos.dv_geral}")
        print(f"  Fator/Valor: {digitavel._campos.fator_valor_e_valor}")
        
        print(f"\nInforma√ß√µes extra√≠das:")
        print(f"  üè¶ Banco: {digitavel.banco}")
        print(f"  üí∞ Moeda: {digitavel._campos.moeda}")
        print(f"  üìã Campo Livre: {digitavel.campo_livre}")
        print(f"  üìÖ Fator Vencimento: {digitavel.fator_vencimento}")
        print(f"  üíµ Valor (centavos): {digitavel.valor_centavos}")
        print(f"  üíµ Valor (reais): R$ {digitavel.valor_documento:.2f}")
        print(f"  üìÖ Data Vencimento: {digitavel.data_vencimento}")
        
        # C√≥digo de barras
        codigo_barras = digitavel.codigo_barras
        print(f"  üìä C√≥digo de Barras: {codigo_barras}")
        print(f"  ‚úÖ DV Geral v√°lido: {digitavel._validar_dv_geral(codigo_barras) if codigo_barras else False}")


def exibir_objeto_digitavel():
    """Exibe o objeto Digitavel completo com todos os atributos e propriedades"""
    print("\nüîç EXIBINDO OBJETO DIGITAVEL COMPLETO")
    print("=" * 60)
    
    linha_real = "033991614.0 0700000191.2 8155600101.4 4 11370000038936"
    digitavel = Digitavel(linha_real)
    
    print(f"üìù Linha Original: {linha_real}")
    print(f"üßπ Valor Normalizado: {digitavel.valor}")
    print(f"üìè Tamanho: {len(digitavel.valor)} d√≠gitos")
    print(f"‚úÖ V√°lido: {digitavel.validar()}")
    
    if digitavel._campos:
        print(f"\nüèóÔ∏è  OBJETO CAMPOS:")
        print(f"   bloco_campo1: {digitavel._campos.bloco_campo1}")
        print(f"   bloco_campo2: {digitavel._campos.bloco_campo2}")
        print(f"   bloco_campo3: {digitavel._campos.bloco_campo3}")
        print(f"   dv_geral: {digitavel._campos.dv_geral}")
        print(f"   fator_valor_e_valor: {digitavel._campos.fator_valor_e_valor}")
        
        print(f"\nüî¢ D√çGITOS VERIFICADORES:")
        print(f"   campo1_sem_dv: {digitavel._campos.campo1_sem_dv}")
        print(f"   dv_campo1: {digitavel._campos.dv_campo1}")
        print(f"   campo2_sem_dv: {digitavel._campos.campo2_sem_dv}")
        print(f"   dv_campo2: {digitavel._campos.dv_campo2}")
        print(f"   campo3_sem_dv: {digitavel._campos.campo3_sem_dv}")
        print(f"   dv_campo3: {digitavel._campos.dv_campo3}")
        
        print(f"\nüìä PROPRIEDADES CALCULADAS:")
        print(f"   banco: {digitavel._campos.banco}")
        print(f"   moeda: {digitavel._campos.moeda}")
        print(f"   campo_livre: {digitavel._campos.campo_livre}")
        print(f"   fator_vencimento: {digitavel._campos.fator_vencimento}")
        print(f"   valor_centavos: {digitavel._campos.valor_centavos}")
        print(f"   valor_decimal: {digitavel._campos.valor_decimal}")
        print(f"   data_vencimento: {digitavel._campos.data_vencimento}")
    
    print(f"\nüéØ PROPRIEDADES P√öBLICAS:")
    print(f"   banco: {digitavel.banco}")
    print(f"   valor_documento: {digitavel.valor_documento}")
    print(f"   data_vencimento: {digitavel.data_vencimento}")
    print(f"   fator_vencimento: {digitavel.fator_vencimento}")
    print(f"   valor_centavos: {digitavel.valor_centavos}")
    print(f"   campo_livre: {digitavel.campo_livre}")
    print(f"   codigo_barras: {digitavel.codigo_barras}")
    
    print(f"\nüîß M√âTODOS DE VALIDA√á√ÉO:")
    print(f"   _validar_campo(campo1): {digitavel._validar_campo(digitavel._campos.bloco_campo1) if digitavel._campos else False}")
    print(f"   _validar_campo(campo2): {digitavel._validar_campo(digitavel._campos.bloco_campo2) if digitavel._campos else False}")
    print(f"   _validar_campo(campo3): {digitavel._validar_campo(digitavel._campos.bloco_campo3) if digitavel._campos else False}")
    print(f"   _validar_dv_geral: {digitavel._validar_dv_geral(digitavel.codigo_barras) if digitavel.codigo_barras else False}")
    
    print(f"\nüìã M√âTODOS DE C√ÅLCULO:")
    print(f"   _calcular_modulo_10('033991614'): {digitavel._calcular_modulo_10('033991614')}")
    print(f"   _calcular_modulo_11('0339916140700000192815560014411370000038936'): {digitavel._calcular_modulo_11('0339916140700000192815560014411370000038936')}")
    
    print("=" * 60)


if __name__ == "__main__":
    print("üöÄ Testando m√≥dulo digitavel (testes unificados)\n")
    
    # Testes de normaliza√ß√£o e valida√ß√£o b√°sica
    test_normalizacao()
    test_validacao_basica()
    test_validacao_campos_curtos()
    
    # Testes de valida√ß√£o completa e DVs
    test_validacao_dv_completa()
    test_correcao_dv()
    test_calculos_modulo()
    test_casos_edge_modulo_11()
    test_validacao_campos()
    
    # Testes de gera√ß√£o e extra√ß√£o
    test_geracao_codigo_barras()
    test_gerar_digitavel_valido()
    
    # Testes de properties e extra√ß√£o de dados
    test_properties_campos_digitavel()
    test_properties_digitavel()
    test_tratamento_excecoes_valor_decimal()
    test_tratamento_excecoes_data_vencimento()
    
    # Testes de cen√°rios reais
    test_cenarios_reais()
    test_digitavel_real_boleto_exemplo()
    test_digitavel_detalhado()
    test_nova_estrategia()
    test_linha_digitavel_real()
    exibir_objeto_digitavel()
    
    # Testes de casos de erro e tratamento de exce√ß√µes
    test_digitavel_com_dv_campo1_errado()
    test_digitavel_com_dv_campo2_errado()
    test_digitavel_com_dv_campo3_errado()
    test_digitavel_com_dv_geral_errado()
    test_digitavel_com_multiplos_dvs_errados()
    test_correcao_dv_especifica()
    test_digitavel_com_caracteres_invalidos()
    test_digitavel_com_tamanhos_incorretos()
    test_properties_com_digitavel_invalido()
    test_tratamento_erros_extracao_campos()
    
    print("\nüéâ Todos os testes do m√≥dulo digitavel passaram!") 